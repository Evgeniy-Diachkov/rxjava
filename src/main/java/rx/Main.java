package rx;// Main.java

import rx.schedulers.*;


public class Main {
    public static void main(String[] args) {
        Scheduler io = new IOThreadScheduler();
        Scheduler computation = new ComputationScheduler();

        Observable<Integer> numbers = Observable.create(emitter -> {
            Disposable disposable = (Disposable) emitter;

            for (int i = 1; i <= 5; i++) {
                // –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ ‚Äî –ø–µ—Ä–µ–¥ onNext
                if (disposable.isDisposed()) {
                    System.out.println("‚õî –û—Ç–º–µ–Ω–∞ –Ω–∞ i = " + i + " (–¥–æ onNext, thread: " + Thread.currentThread().getName() + ")");
                    return;
                }

                emitter.onNext(i);

                // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–æ—Å–ª–µ onNext
                try {
                    Thread.sleep(100); // ‚Üê –∫–ª—é—á–µ–≤–æ–π –º–æ–º–µ–Ω—Ç!
                } catch (InterruptedException e) {
                    emitter.onError(e);
                    return;
                }

                // –í—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ ‚Äî –ø–æ—Å–ª–µ onNext, –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
                if (disposable.isDisposed()) {
                    System.out.println("‚õî –û—Ç–º–µ–Ω–∞ –Ω–∞ i = " + (i + 1) + " (–ø–æ—Å–ª–µ onNext, thread: " + Thread.currentThread().getName() + ")");
                    return;
                }
            }

            emitter.onComplete();
        });

        numbers
                .subscribeOn(io)
                .observeOn(computation)
                .filter(n -> n % 2 == 1)
                .map(n -> "–ß–∏—Å–ª–æ: " + n)
                .<String>flatMap(str -> Observable.create(em -> {
                    em.onNext(str);
                    em.onNext(str + "!");
                    em.onComplete();
                }))
                .subscribeWith(new Subscriber<String>() {
                    private Disposable disposable;

                    @Override
                    public void onSubscribe(Disposable d) {
                        this.disposable = d;
                        System.out.println("üìå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å (thread: " + Thread.currentThread().getName() + ")");
                    }

                    @Override
                    public void onNext(String item) {
                        System.out.println("‚û° " + item + " (thread: " + Thread.currentThread().getName() + ")");
                        if (item.contains("3")) {
                            System.out.println("üõë –û—Ç–ø–∏—Å—ã–≤–∞—é—Å—å –Ω–∞ " + item);
                            disposable.dispose();
                        }
                    }

                    @Override
                    public void onError(Throwable error) {
                        System.err.println("‚ùå –û—à–∏–±–∫–∞: " + error.getMessage());
                    }

                    @Override
                    public void onComplete() {
                        System.out.println("‚úÖ –ü–æ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à—ë–Ω");
                    }
                });

        try {
            Thread.sleep(2000); // –¥–∞—Ç—å –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è –≤—Å–µ–º –ø–æ—Ç–æ–∫–∞–º
        } catch (InterruptedException ignored) {}

        System.out.println("üèÅ Main –∑–∞–≤–µ—Ä—à—ë–Ω (thread: " + Thread.currentThread().getName() + ")");
    }
}
